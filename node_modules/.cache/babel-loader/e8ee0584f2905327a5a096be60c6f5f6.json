{"ast":null,"code":"var _jsxFileName = \"/Users/andrii/Desktop/toDo/src/App.js\";\nimport React, { useEffect } from 'react';\nimport { connect } from \"react-redux\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport ToDoS from \"./components/toDoS/toDoS\";\nimport Layout from \"./containers/layout/layout\";\nimport * as AC from \"../src/redux/actions\";\n\nconst App = props => {\n  useEffect(() => {\n    //this one gets tasks from session storage and sets them again,  so we are safe while page is refreshed at least in scope of one browser session\n    let keys = Object.keys(sessionStorage);\n    keys.forEach(element => {\n      let newTask = sessionStorage.getItem(element);\n      props.addTask(JSON.parse(newTask));\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/done\",\n    render: () => /*#__PURE__*/React.createElement(ToDoS, {\n      tasks: props.tasks,\n      done: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 47\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/active\",\n    render: () => /*#__PURE__*/React.createElement(ToDoS, {\n      tasks: props.tasks,\n      active: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 49\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    render: () => /*#__PURE__*/React.createElement(ToDoS, {\n      tasks: props.tasks,\n      all: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 49\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }\n  }))));\n};\n\nconst mapStateToProps = state => {\n  return {\n    usersInputValue: state.toDo.usersInputValue,\n    tasks: state.toDo.tasks\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addTask: newTask => dispatch(AC.addTaskActionCreator(newTask))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","map":{"version":3,"sources":["/Users/andrii/Desktop/toDo/src/App.js"],"names":["React","useEffect","connect","Route","Switch","ToDoS","Layout","AC","App","props","keys","Object","sessionStorage","forEach","element","newTask","getItem","addTask","JSON","parse","tasks","mapStateToProps","state","usersInputValue","toDo","mapDispatchToProps","dispatch","addTaskActionCreator"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;AACA,OAAO,WAAP;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;;AAGA,MAAOC,GAAG,GAAIC,KAAD,IAAW;AACtBR,EAAAA,SAAS,CAAC,MAAM;AAAM;AACpB,QAAIS,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYE,cAAZ,CAAX;AACAF,IAAAA,IAAI,CAACG,OAAL,CAAcC,OAAD,IAAa;AACxB,UAAIC,OAAO,GAAGH,cAAc,CAACI,OAAf,CAAuBF,OAAvB,CAAd;AACAL,MAAAA,KAAK,CAACQ,OAAN,CAAcC,IAAI,CAACC,KAAL,CAAWJ,OAAX,CAAd;AACD,KAHD;AAID,GANQ,EAMN,EANM,CAAT;AAQE,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,OAAZ;AAAoB,IAAA,MAAM,EAAE,mBAAM,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAEN,KAAK,CAACW,KAApB;AAA2B,MAAA,IAAI,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,SAAZ;AAAsB,IAAA,MAAM,EAAE,mBAAM,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAEX,KAAK,CAACW,KAApB;AAA2B,MAAA,MAAM,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,GAAlB;AAAsB,IAAA,MAAM,EAAE,mBAAM,oBAAC,KAAD;AAAO,MAAA,KAAK,EAAEX,KAAK,CAACW,KAApB;AAA2B,MAAA,GAAG,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,CADF,CADF,CADF;AAYH,CArBD;;AAuBA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AACjC,SAAO;AACLC,IAAAA,eAAe,EAAED,KAAK,CAACE,IAAN,CAAWD,eADvB;AAELH,IAAAA,KAAK,EAAEE,KAAK,CAACE,IAAN,CAAWJ;AAFb,GAAP;AAID,CALD;;AAMA,MAAMK,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLT,IAAAA,OAAO,EAAGF,OAAD,IAAaW,QAAQ,CAACnB,EAAE,CAACoB,oBAAH,CAAwBZ,OAAxB,CAAD;AADzB,GAAP;AAGD,CAJD;;AAMA,eAAeb,OAAO,CAACmB,eAAD,EAAkBI,kBAAlB,CAAP,CAA6CjB,GAA7C,CAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { connect } from \"react-redux\";\nimport { Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport ToDoS from \"./components/toDoS/toDoS\";\nimport Layout from \"./containers/layout/layout\";\nimport * as AC from \"../src/redux/actions\";\n\n\nconst  App = (props) => {\n  useEffect(() => {     //this one gets tasks from session storage and sets them again,  so we are safe while page is refreshed at least in scope of one browser session\n    let keys = Object.keys(sessionStorage);\n    keys.forEach((element) => {\n      let newTask = sessionStorage.getItem(element);\n      props.addTask(JSON.parse(newTask));\n    });\n  }, [])\n \n    return (\n      <div className=\"App\">\n        <Layout>\n          <Switch>\n            <Route path=\"/done\" render={() => <ToDoS tasks={props.tasks} done />} />\n            <Route path=\"/active\" render={() => <ToDoS tasks={props.tasks} active />} />\n            <Route exact path=\"/\" render={() => <ToDoS tasks={props.tasks} all />} />\n          </Switch>\n        </Layout>\n      </div>\n    );\n \n}\n\nconst mapStateToProps = (state) => {\n  return {\n    usersInputValue: state.toDo.usersInputValue,\n    tasks: state.toDo.tasks,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    addTask: (newTask) => dispatch(AC.addTaskActionCreator(newTask)),\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}