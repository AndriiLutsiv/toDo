{"ast":null,"code":"import * as TYPES from './type';\nconst initialState = {\n  tasks: [],\n  //tasks addeed by user will be set in array\n  usersInputValue: ''\n};\n\nconst toDoReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case TYPES.ADD_TASK:\n      return { ...state,\n        tasks: [...state.tasks, action.newTask]\n      };\n\n    case TYPES.REMOVE_TASK:\n      return { ...state,\n        tasks: state.tasks.filter(task => {\n          return task.id !== action.taskId;\n        })\n      };\n\n    case TYPES.TOGGLE_MARK:\n      //allows user to toggle task as done or as active\n      return { ...state,\n        tasks: state.tasks.map(item => {\n          if (item.id === action.taskId) {\n            return { ...item,\n              active: !item.active\n            };\n          } else {\n            return item;\n          }\n        })\n      };\n\n    case TYPES.USER_TYPING:\n      return { ...state,\n        usersInputValue: action.text\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default toDoReducer;","map":{"version":3,"sources":["/Users/andrii/Desktop/toDo/src/redux/toDoReducer.js"],"names":["TYPES","initialState","tasks","usersInputValue","toDoReducer","state","action","type","ADD_TASK","newTask","REMOVE_TASK","filter","task","id","taskId","TOGGLE_MARK","map","item","active","USER_TYPING","text"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,QAAvB;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AACF;AACfC,EAAAA,eAAe,EAAE;AAFA,CAArB;;AAIA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGJ,YAAT,EAAuBK,MAAvB,KAAkC;AAClD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,KAAK,CAACQ,QAAX;AACI,aAAO,EACH,GAAGH,KADA;AAEHH,QAAAA,KAAK,EAAE,CAAC,GAAGG,KAAK,CAACH,KAAV,EAAiBI,MAAM,CAACG,OAAxB;AAFJ,OAAP;;AAIJ,SAAKT,KAAK,CAACU,WAAX;AACI,aAAO,EACH,GAAGL,KADA;AAEHH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYS,MAAZ,CAAmBC,IAAI,IAAI;AAC9B,iBAAOA,IAAI,CAACC,EAAL,KAAYP,MAAM,CAACQ,MAA1B;AACH,SAFM;AAFJ,OAAP;;AAMJ,SAAKd,KAAK,CAACe,WAAX;AAAqC;AACjC,aAAO,EACH,GAAGV,KADA;AAEHH,QAAAA,KAAK,EAAEG,KAAK,CAACH,KAAN,CAAYc,GAAZ,CAAgBC,IAAI,IAAI;AAC3B,cAAIA,IAAI,CAACJ,EAAL,KAAYP,MAAM,CAACQ,MAAvB,EAA+B;AAC3B,mBAAO,EACH,GAAGG,IADA;AAEHC,cAAAA,MAAM,EAAE,CAACD,IAAI,CAACC;AAFX,aAAP;AAIH,WALD,MAKO;AACH,mBAAOD,IAAP;AACH;AACJ,SATM;AAFJ,OAAP;;AAaJ,SAAKjB,KAAK,CAACmB,WAAX;AACI,aAAO,EACH,GAAGd,KADA;AAEHF,QAAAA,eAAe,EAAEG,MAAM,CAACc;AAFrB,OAAP;;AAIA;AACI,aAAOf,KAAP;AAjCZ;AAmCH,CApCD;;AAqCA,eAAeD,WAAf","sourcesContent":["import * as TYPES from './type';\nconst initialState = {\n    tasks: [],     //tasks addeed by user will be set in array\n    usersInputValue: ''     \n}\nconst toDoReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case TYPES.ADD_TASK:\n            return {\n                ...state,\n                tasks: [...state.tasks, action.newTask]\n            };\n        case TYPES.REMOVE_TASK:\n            return {\n                ...state,\n                tasks: state.tasks.filter(task => {\n                    return task.id !== action.taskId\n                })\n            };\n        case TYPES.TOGGLE_MARK:              //allows user to toggle task as done or as active\n            return {\n                ...state,\n                tasks: state.tasks.map(item => {\n                    if (item.id === action.taskId) {\n                        return {\n                            ...item,\n                            active: !item.active\n                        }\n                    } else {\n                        return item;\n                    }\n                })\n            };\n        case TYPES.USER_TYPING:\n            return {\n                ...state,\n                usersInputValue: action.text\n            }\n            default:\n                return state;\n    }\n}\nexport default toDoReducer;"]},"metadata":{},"sourceType":"module"}